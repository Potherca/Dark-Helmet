<?php

namespace DarkHelmet\Core;

require_once(PROJECT_DIR.'tests/TestCase.php');

/**
 * Test class for Context.
 * Generated by PHPUnit on 2012-05-14 at 21:58:56.
 */
class ContextTest extends \TestCase {

	/**
	 * @var Context
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new Context();
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}
	
//////////////////////// Tests for Getters and Setters \\\\\\\\\\\\\\\\\\\\\\\\

	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::getDate
	 * @expectedException \PHPTAL_VariableNotFoundException
	 */
	public function getDate_ThrowsException_WhenNoDateSet() {
		$this->object->getDate();
	}

	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::getDate
	 * @covers DarkHelmet\Core\Context::setDate
	 * @todo Implement testSetDate().
	 */
	public function getDate_ReturnsDate_WhenDateWasPreviouslySet() {
		$oDateTime = new \DateTime();
		$this->object->setDate($oDateTime);
		$this->assertSame($oDateTime, $this->object->getDate());
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::setDate
	 * @expectedException \ErrorException
	 */
	public function setDate_ThrowsException_WhenNoDateGiven()
	{
		$mock = new \stdClass();
		$this->object->setDate($mock);
	}

	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::getTemplate
	 * @expectedException \PHPTAL_VariableNotFoundException
	 */
	public function getTemplate_ThrowsException_WhenNotSet() {
		$this->object->getTemplate();
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::getTemplate
	 * @covers DarkHelmet\Core\Context::setTemplate
	 */
	public function getTemplate_ReturnsString_WhenInitialized() {
		$sTemplate = 'Foo';
		$this->object->setTemplate($sTemplate);
		$this->assertSame($sTemplate, $this->object->getTemplate());
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::getTagPrefixes
	 * @expectedException \PHPTAL_VariableNotFoundException
	 */
	public function getTagPrefixes_ThrowsException_WhenNotSet() {
		$this->object->getTagPrefixes();
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::getTagPrefixes
	 * @covers DarkHelmet\Core\Context::setTagPrefixes
	 */
	public function getTagPrefixes_ReturnsArray_WhenSet() {
		$aValues = array('foo', 'bar', 'baz');
		$this->object->setTagPrefixes($aValues);
		$this->assertSame($aValues, $this->object->getTagPrefixes());
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::getTagPrefix
	 * @expectedException \PHPTAL_VariableNotFoundException
	 */
	public function getTagPrefix_ThrowsException_WhenNoTagsSet() {
		$this->object->getTagPrefix('foo');
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::getTagPrefix
	 * @expectedException \ErrorException
	 */
	public function getTagPrefix_ThrowsException_WhenTagsSetButKeyNotPresent() {
		$aTags = array('foo' => 'bar');
		$this->object->setTagPrefixes($aTags);
		$this->object->getTagPrefix('baz');
	}

	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::getTagPrefix
	 */
	public function getTagPrefix_ReturnValue_WhenTagsSetAndKeyPresent() {
		$aTags = array('foo' => 'bar');
		$this->object->setTagPrefixes($aTags);
		$this->assertEquals('bar', $this->object->getTagPrefix('foo'));
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::getMessages
	 */
	public function getMessages_ReturnsEmptyArray_WhenNoMessagesSet() {
		$this->assertSame(array(), $this->object->getMessages());
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::addMessage
	 * @covers DarkHelmet\Core\Context::getMessages
	 */
	public function addMessage_AddsTwoMessagesToList_WhenCalledTwice() {
		$oFirstMessage = new Message('1');
		$oSecondMessage = new Message('2');
		
		$this->assertSame(array(), $this->object->getMessages());
		$this->object->addMessage($oFirstMessage);
		$this->object->addMessage($oSecondMessage);
		
		$aMessages = $this->object->getMessages();
		$this->assertSame(2, count($aMessages));
		$this->assertTrue(in_array($oFirstMessage, $aMessages));
		$this->assertTrue(in_array($oSecondMessage, $aMessages));
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::get
	 * @expectedException \PHPTAL_VariableNotFoundException
	 */
	public function get_ThrowsException_WhenKeyNotSet() {
		$this->object->get('foo');
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::get
	 * @covers DarkHelmet\Core\Context::set
	 */
	public function get_ReturnsSetValue_WhenValueIsSet() {
		$key = 'foo';
		$value = 'bar';
		$this->object->set($key, $value);
		$this->assertSame($value, $this->object->get($key));
	}
	
///////////////////// Tests for ArrayAccess implementation \\\\\\\\\\\\\\\\\\\\\
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::offsetGet
	 * @expectedException \PHPTAL_VariableNotFoundException
	 */
	public function offsetGet_ThrowsException_WhenOffsetNotSet() {
		$foo = $this->object['foo'];
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::offsetGet
	 * @covers DarkHelmet\Core\Context::offsetSet
	 */
	public function offsetGet_ReturnsValue_WhenOffsetIsSet() {
		$key = 'foo';
		$value = 'bar';
		$this->object[$key] = $value;
		$this->assertSame($value, $this->object[$key]);
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::offsetExists
	 */
	public function offsetExists_ReturnsFalse_WhenOffsetIsNotSet() {
		$this->assertFalse(isset($this->object['foo']));
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::offsetExists
	 */
	public function offsetExists_ReturnsTrue_WhenOffsetIsSet() {
		$key = 'foo';
		$value = 'bar';
		
		$this->object[$key] = $value;
		$this->assertTrue(isset($this->object[$key]));
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::offsetExists
	 * @covers DarkHelmet\Core\Context::offsetUnset
	 */
	public function offsetExists_ReturnsFalse_AfterNonExistingOffsetHasBeenUnset() {
		$key = 'foo';
		
		unset($this->object[$key]);
		$this->assertFalse(isset($this->object[$key]));
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::offsetExists
	 * @covers DarkHelmet\Core\Context::offsetUnset
	 */
	public function offsetExists_ReturnsFalse_AfterExistingOffsetHasBeenUnset() {
		$key = 'foo';
		$value = 'bar';
		
		$this->object[$key] = $value;
		$this->assertTrue(isset($this->object[$key]));
		
		unset($this->object[$key]);
		$this->assertFalse(isset($this->object[$key]));
	}
	
	/**
	 * @test
	 * @covers DarkHelmet\Core\Context::from
	 */
	public function from_DoesSomething_WhenCalled() {
		$this->markTestIncomplete(
				'I don\'t know what this method should do or why it would be useful'
		);
	}
	
}

?>
